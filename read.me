Objetivo: aprofundar o entendimento sobre Programação Dinâmica;

Enunciado: 

- Resolva o problema da distância de edição conforme o enuciado em sala de aula.

Ache uma solução que testa todas as combinações possíveis e seleciona a melhor, aplicando divisão-e-conquista ou não;
Contabilize o número de iterações;
Implemente e teste sua solução, para (pelos menos) os caso abaixo.
 
s1 = "Casablanca"
s2 = "Portentoso"

s1 = "Maven, a Yiddish word meaning accumulator of knowledge, began as an attempt to " +
				"simplify the build processes in the Jakarta Turbine project. There were several" + 
				" projects, each with their own Ant build files, that were all slightly different." +
				"JARs were checked into CVS. We wanted a standard way to build the projects, a clear "+ 
				"definition of what the project consisted of, an easy way to publish project information" +
				"and a way to share JARs across several projects. The result is a tool that can now be" +
				"used for building and managing any Java-based project. We hope that we have created " +
				"something that will make the day-to-day work of Java developers easier and generally help " +
				"with the comprehension of any Java-based project.";
s2 = "This post is not about deep learning. But it could be might as well. This is the power of " +
				"kernels. They are universally applicable in any machine learning algorithm. Why you might" +
				"ask? I am going to try to answer this question in this article." + 
			        "Go to the profile of Marin Vlastelica Pogančić" + 
			        "Marin Vlastelica Pogančić Jun";
 

         ED(S, T, i, j): int
        // S: String inicial, T: String final, i: [1..m], j:[1..n]
        // retorna o número mínimo de edições quando comparando
        // S[i] com T[j]. m é o tamanho de S, n o tamanho de T
        //
        Caso Base:
        Quando ficamos sem caracteres para comparer em S ou em T. Se em ambas, o
        resultado é 0. Se uma das duas, retorna o restante dos caracteres da que não
        está vazia;
        Casos Recursivos
        Se S[i] == T[i], chame recursivamente ED(S, T, i-1, j-1) (foi match, não
        precisa fazer nada nesta posição, o custo é zero.
        Se não, três chamadas recursivas são necessárias:
        • Substituição: ED(S, T, i-1, j-1) + 1
        • Inserção: ED(S, T, i, j-1) + 1
        • Remoção: ED(S, T, i-1, j) + 1
        • Retorne a que resultar em menor custo



=========================================================================================================================================================================================================================




		Resolva o problema da distância de edição utilizando o algoritmo com programação dinâmica visto em aula, teste e contabilize o número de iterações.
Monte uma tabela com os resultados e número de iterações de ambas a implementações, para, pelo menos, os casos de testes disponíveis abaixo.
s1 = "Casablanca"
s2 = "Portentoso"

s1 = "Maven, a Yiddish word meaning accumulator of knowledge, began as an attempt to " +
				"simplify the build processes in the Jakarta Turbine project. There were several" + 
				" projects, each with their own Ant build files, that were all slightly different." +
				"JARs were checked into CVS. We wanted a standard way to build the projects, a clear "+ 
				"definition of what the project consisted of, an easy way to publish project information" +
				"and a way to share JARs across several projects. The result is a tool that can now be" +
				"used for building and managing any Java-based project. We hope that we have created " +
				"something that will make the day-to-day work of Java developers easier and generally help " +
				"with the comprehension of any Java-based project.";
s2 = "This post is not about deep learning. But it could be might as well. This is the power of " +
				"kernels. They are universally applicable in any machine learning algorithm. Why you might" +
				"ask? I am going to try to answer this question in this article." + 
			        "Go to the profile of Marin Vlastelica Pogančić" + 
			        "Marin Vlastelica Pogančić Jun";
 

// Assumindo os Custos: Remoção=R, Inserção=I , Substituição=S e Match=M=0;

inteiro distEdProgDina(string A, String B)
	m = tamanho(A);
	n = tamanho(B);
	matriz[0][0] = 0;
	for i = 1 até A.length()
	   matriz[i][0] = matriz[i-1][0] + 1  // soma uma Inserção;
	for j = 1 até tamanho(B)
	   matriz[0][j] = matriz[0][j-1] + 1  // Soma uma Remoção;
	for i = 1 até A.length()
	   for j = 1 até tamanho(B)
	      If A[i] == B[j]
		 custoExtra = 0 //Operação Match;
	      else
		   custoExtra = 1 //Operação Substituição;
		 matriz[i][j] = Mínimo(matriz[i-1][j] +1, matriz[i][j-1] +1, 
				    matriz[i-1][j-1] + custoExtra];
	devolva matriz[A.length()][tamanho(B)];